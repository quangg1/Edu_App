import { useState, useCallback, useEffect, useRef } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "../components/ui/dialog";
import { Button } from "../components/ui/button";
import { Label } from "../components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../components/ui/select";
import { Textarea } from "../components/ui/textarea";
import { Loader2, Sparkles, Upload, FileText, X, Download } from "lucide-react";
import { Card } from "../components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../components/ui/tabs";
import { useToast } from "../components/ui/use-toast";

export interface LessonPlanFormData {
    type: 'k12' | 'kindergarten' | 'custom';
    prompt: string;
    model?: string;
}

interface TeachingMethod {
    id: string;
    title: string;
    description: string;
    example: string;
}

interface LessonPlanDialogProps {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    selectedMethod?: TeachingMethod | null;
}

const LessonPlanDialog = ({ open, onOpenChange, selectedMethod }: LessonPlanDialogProps) => {
    const { toast } = useToast();
    const [activeTab, setActiveTab] = useState("form");
    const [file, setFile] = useState<File | null>(null);
    const [isGenerating, setIsGenerating] = useState(false);
    const [streamOutput, setStreamOutput] = useState("");
    const [downloadToken, setDownloadToken] = useState<string | null>(null);
    const abortControllerRef = useRef<AbortController | null>(null);

    const [formData, setFormData] = useState<LessonPlanFormData>({
        type: selectedMethod?.id === 'kindergarten' ? 'kindergarten' : 'k12',
        prompt: "",
        model: "gemini-2.5-flash"
    });

    useEffect(() => {
        if (!open) {
            setFormData({
                type: selectedMethod?.id === 'kindergarten' ? 'kindergarten' : 'k12',
                prompt: "",
                model: "gemini-2.5-flash"
            });
            setFile(null);
            setActiveTab("form");
            setStreamOutput("");
            setDownloadToken(null);
            if (abortControllerRef.current) {
                abortControllerRef.current.abort();
                abortControllerRef.current = null;
            }
        }
    }, [open, selectedMethod]);

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        setFormData({
            ...formData,
            [e.target.id]: e.target.value,
        });
    };

    const handleSelectChange = (id: keyof LessonPlanFormData, value: string) => {
        setFormData({
            ...formData,
            [id]: value as any,
        });
    };

    const handleFileChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
        const files = e.target.files;
        if (!files || files.length === 0) {
            setFile(null);
            return;
        }
        setFile(files[0]);
        toast({ 
            title: "Upload File", 
            description: `File đã được tải lên: ${files[0].name}`,
            variant: "default"
        });
    }, [toast]);

    const handleRemoveFile = useCallback(() => {
        setFile(null);
    }, []);

    const handleFormSubmit = useCallback(async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setIsGenerating(true);
        setActiveTab('result');
        setStreamOutput('');
        setDownloadToken(null);

        const controller = new AbortController();
        abortControllerRef.current = controller;

        try {
            const data = new FormData();
            data.append('prompt', formData.prompt);
            data.append('model', formData.model || 'gemini-2.5-flash');
            
            if (file) {
                data.append('files', file);
            }

            const response = await fetch(`/api/lesson-plans/generate-${formData.type}-stream`, {
                method: 'POST',
                body: data,
                signal: controller.signal
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const reader = response.body?.getReader();
            const decoder = new TextDecoder();

            if (!reader) {
                throw new Error("Failed to get response reader");
            }

            while (true) {
                const { done, value } = await reader.read();
                
                if (done) {
                    break;
                }

                const text = decoder.decode(value);
                const lines = text.split('\n');
                
                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        try {
                            const eventData = JSON.parse(line.slice(6));

                            if (eventData.content) {
                                setStreamOutput(prev => prev + eventData.content);
                            }
                            
                            if (eventData.download_url) {
                                const token = eventData.download_url.split('/').pop();
                                setDownloadToken(token || null);
                                setIsGenerating(false);
                                toast({
                                    title: "Thành công",
                                    description: "Giáo án đã được tạo xong!",
                                    variant: "default"
                                });
                            }
                        } catch (err) {
                            // Ignore parse errors from incomplete chunks
                        }
                    }
                }
            }
        } catch (error) {
            if (error instanceof Error) {
                if (error.name === 'AbortError') {
                    toast({ 
                        title: "Đã hủy", 
                        description: "Quá trình tạo giáo án đã bị hủy.",
                        variant: "default"
                    });
                    return;
                }
                
                toast({ 
                    title: "Lỗi", 
                    description: error.message,
                    variant: "destructive"
                });
            }
        } finally {
            setIsGenerating(false);
            abortControllerRef.current = null;
        }
    }, [formData, file, toast]);

    const handleDownload = useCallback(() => {
        if (downloadToken) {
            window.open(`/api/lesson-plans/download-lesson-plan/${downloadToken}`, '_blank');
            toast({ 
                title: "Tải xuống", 
                description: "File DOCX đang được tải xuống.",
                variant: "default"
            });
        }
    }, [downloadToken, toast]);

    const handleCancel = useCallback(() => {
        if (isGenerating) {
            if (abortControllerRef.current) {
                abortControllerRef.current.abort();
            }
        } else {
            onOpenChange(false);
        }
    }, [isGenerating, onOpenChange]);

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <DialogContent className="sm:max-w-[700px] max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                    <DialogTitle>
                        {formData.type === 'kindergarten' ? 'Tạo Kế hoạch Hoạt động' : 'Tạo Giáo án / Tài liệu'}
                    </DialogTitle>
                </DialogHeader>
                
                <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                    <TabsList className="grid w-full grid-cols-2">
                        <TabsTrigger value="form" disabled={isGenerating}>Nhập Liệu</TabsTrigger>
                        <TabsTrigger value="result" disabled={!streamOutput && !isGenerating}>
                            Kết Quả {isGenerating && !downloadToken && ' (Đang tạo...)'}
                        </TabsTrigger>
                    </TabsList>

                    <TabsContent value="form">
                        <form onSubmit={handleFormSubmit} className="space-y-4 pt-4">
                            <div className="space-y-4">
                                <div className="space-y-2">
                                    <Label htmlFor="type">Loại giáo án</Label>
                                    <Select 
                                        value={formData.type} 
                                        onValueChange={(val: 'k12' | 'kindergarten' | 'custom') => handleSelectChange('type', val)} 
                                        disabled={isGenerating}
                                    >
                                        <SelectTrigger id="type"><SelectValue placeholder="Chọn loại" /></SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="k12">Giáo án K12</SelectItem>
                                            <SelectItem value="kindergarten">Giáo án Mầm non</SelectItem>
                                            <SelectItem value="custom">Tùy chỉnh</SelectItem>
                                        </SelectContent>
                                    </Select>
                                </div>

                                <div className="space-y-2">
                                    <Label htmlFor="prompt">Yêu cầu chi tiết <span className="text-red-500">*</span></Label>
                                    <Textarea 
                                        id="prompt" 
                                        value={formData.prompt} 
                                        onChange={handleInputChange} 
                                        rows={6} 
                                        placeholder="Mô tả chi tiết yêu cầu của bạn về giáo án. Ví dụ: môn học, chủ đề, lớp học, phương pháp, mục tiêu, thời lượng..." 
                                        disabled={isGenerating} 
                                    />
                                </div>
                            </div>
                            
                            <Card className="p-4 border-dashed border-primary/50 bg-primary/5">
                                <Label htmlFor="file-upload" className="flex items-center space-x-2 text-sm font-medium cursor-pointer">
                                    <Upload className="w-5 h-5 text-primary" />
                                    <span>Tải lên tài liệu tham khảo (Tùy chọn)</span>
                                </Label>
                                <input
                                    id="file-upload"
                                    type="file"
                                    className="hidden"
                                    onChange={handleFileChange}
                                    disabled={isGenerating}
                                />
                                {file && (
                                    <div className="mt-3 flex items-center justify-between p-2 bg-white rounded-md border border-gray-200">
                                        <span className="flex items-center gap-2 text-sm text-gray-700">
                                            <FileText className="w-4 h-4 text-primary" />
                                            {file.name}
                                        </span>
                                        <Button 
                                            type="button" 
                                            variant="ghost" 
                                            size="sm" 
                                            onClick={handleRemoveFile}
                                            disabled={isGenerating}
                                        >
                                            <X className="w-4 h-4 text-red-500" />
                                        </Button>
                                    </div>
                                )}
                            </Card>

                            <DialogFooter className="flex gap-3 pt-4">
                                <Button
                                    type="button"
                                    variant="outline"
                                    className="flex-1"
                                    onClick={handleCancel}
                                >
                                    {isGenerating ? 'Hủy Tạo' : 'Đóng'}
                                </Button>
                                <Button 
                                    type={downloadToken ? "button" : "submit"}
                                    className="flex-1 gap-2" 
                                    disabled={isGenerating && !downloadToken} 
                                    onClick={downloadToken ? handleDownload : undefined}
                                >
                                    {isGenerating ? (
                                        <>
                                            <Loader2 className="w-4 h-4 animate-spin" />
                                            {streamOutput ? 'Đang hoàn thiện file...' : 'AI đang khởi tạo...'}
                                        </>
                                    ) : downloadToken ? (
                                        <>
                                            <Download className="w-4 h-4" />
                                            Tải xuống DOCX
                                        </>
                                    ) : (
                                        <>
                                            <Sparkles className="w-4 h-4" />
                                            {formData.type === 'k12' && 'Tạo giáo án với AI'}
                                            {formData.type === 'kindergarten' && 'Tạo hoạt động với AI'}
                                            {formData.type === 'custom' && 'Tạo tài liệu với AI'}
                                        </>
                                    )}
                                </Button>
                            </DialogFooter>
                        </form>
                    </TabsContent>
                    
                    <TabsContent value="result">
                        <div className="mt-2 p-4 border rounded-lg bg-gray-50 h-auto max-h-[60vh] overflow-y-auto">
                            {isGenerating && !streamOutput && (
                                <p className="text-center text-muted-foreground flex items-center justify-center gap-2 py-8">
                                    <Loader2 className="w-5 h-5 animate-spin" /> 
                                    Đang tạo nội dung, vui lòng chờ...
                                </p>
                            )}
                            <div 
                                className="lesson-plan-output space-y-4" 
                                dangerouslySetInnerHTML={{ __html: streamOutput }} 
                            />
                            
                            {isGenerating && streamOutput && (
                                <p className="text-center text-primary flex items-center justify-center gap-2 pt-4">
                                    <Loader2 className="w-4 h-4 animate-spin" /> 
                                    Đang hoàn thiện cấu trúc...
                                </p>
                            )}
                        </div>
                        <DialogFooter className="flex gap-3 pt-4">
                            <Button
                                type="button"
                                variant="outline"
                                className="flex-1"
                                onClick={() => setActiveTab("form")}
                                disabled={isGenerating && !downloadToken}
                            >
                                {downloadToken ? 'Chỉnh Sửa Input' : 'Quay lại'}
                            </Button>
                            <Button 
                                type="button"
                                className="flex-1 gap-2" 
                                disabled={!downloadToken}
                                onClick={handleDownload}
                            >
                                <Download className="w-4 h-4" />
                                Tải xuống DOCX
                            </Button>
                        </DialogFooter>
                    </TabsContent>
                </Tabs>
            </DialogContent>
        </Dialog>
    );
};

export default LessonPlanDialog;